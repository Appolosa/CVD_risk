import streamlit as st
import pandas as pd

st.set_page_config(page_title="–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –°–°–ó", layout="centered")
st.title("ü´Ä –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π (–°–°–ó)")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –º–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º", type=["xlsx"])

# –¢–∞–±–ª–∏—Ü–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
criteria = [
    {"marker": "ADMA", "thresholds": [0.45, 0.6], "score": [0, 1, 2], "direction": ">"},
    {"marker": "TotalDMA", "thresholds": [0.45, 0.6], "score": [0, 1, 2], "direction": ">"},
    {"marker": "Arg/ADMA", "thresholds": [100, 150], "score": [2, 1, 0], "direction": "<"},
    {"marker": "(Arg+HomoArg)/ADMA", "thresholds": [150, 200], "score": [2, 1, 0], "direction": "<"},
    {"marker": "TMAO", "thresholds": [0.05, 0.08], "score": [0, 1, 2], "direction": ">"},
    {"marker": "Betaine/Choline", "thresholds": [1.5, 2.0], "score": [2, 1, 0], "direction": "<"},
    {"marker": "(C16+C18)/C2", "thresholds": [0.5, 0.7], "score": [0, 1, 2], "direction": ">"},
    {"marker": "C0/(C16+C18)", "thresholds": [1.6, 2.0], "score": [2, 1, 0], "direction": "<"},
    {"marker": "BCAA", "thresholds": [300, 450], "score": [0, 1, 2], "direction": ">"},
    {"marker": "BCAA/AAA", "thresholds": [2.0, 2.5], "score": [0, 1, 2], "direction": ">"},
    {"marker": "Kyn/Trp", "thresholds": [0.045, 0.06], "score": [0, 1, 2], "direction": ">"},
    {"marker": "Quin/HIAA", "thresholds": [1.5, 2.5], "score": [0, 1, 2], "direction": ">"},
    {"marker": "Quinolinic acid", "thresholds": [50, 80], "score": [0, 1, 2], "direction": ">"},
    {"marker": "Serotonin", "thresholds": [0.05, 0.1], "score": [2, 1, 0], "direction": "<"},
    {"marker": "Melatonin", "thresholds": [15, 30], "score": [2, 1, 0], "direction": "<"},
    {"marker": "Cortisol", "thresholds": [500, 650], "score": [0, 1, 2], "direction": ">"}
]

interpretation_scale = {
    (9, 10): "–ú–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∞—è –æ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –∏–ª–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–µ –∏–ª–∏ –≤—ã—à–µ –ø–æ '–ø–ª—é—Å–∞–º')",
    (7, 8): "–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è, –∫–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç",
    (5, 6): "–£–º–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è ‚Äî –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ —É–∂–µ —Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏",
    (3, 4): "–°—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Äî —Å–Ω–∏–∂–µ–Ω —Ä–µ–∑–µ—Ä–≤, —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞",
    (1, 2): "–í—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç–æ–ª–æ–≥–∏–∏, –¥–µ–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è, –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
}

def interpret_score(score):
    for (low, high), text in interpretation_scale.items():
        if low <= score <= high:
            return text
    return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏"

if uploaded_file:
    df = pd.read_excel(uploaded_file, header=None)
    headers = df.iloc[0]
    values = df.iloc[1]
    row = pd.Series(data=values.values, index=headers.values)

    total_score = 0
    report = []

    for rule in criteria:
        marker = rule["marker"]
        if marker in row:
            try:
                value = float(row[marker])
                t1, t2 = rule["thresholds"]
                s0, s1, s2 = rule["score"]
                if rule["direction"] == ">":
                    score = s0 if value <= t1 else s1 if value <= t2 else s2
                else:
                    score = s0 if value >= t2 else s1 if value >= t1 else s2
                total_score += score
                report.append((marker, value, score))
            except:
                continue

    max_score = len(report) * 2
    if max_score > 0:
        scaled_score = round((total_score / max_score) * 10)
        interpretation = interpret_score(scaled_score)

        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏")
        st.metric("–°—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª", scaled_score)
        st.write(interpretation)

        st.subheader("üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏")
        st.dataframe(pd.DataFrame(report, columns=["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–ó–Ω–∞—á–µ–Ω–∏–µ", "–ë–∞–ª–ª—ã"]))
    else:
        st.error("‚ùóÔ∏è–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç.")
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –º–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏.")
